dnl $Id$

AC_INIT(fetchaddr.c)

AC_MSG_CHECKING(for prefix)
if test x$prefix = xNONE; then
	lbdb_cv_prefix=$ac_default_prefix
else
	lbdb_cv_prefix=$prefix
fi
AC_MSG_RESULT($lbdb_cv_prefix)

AC_PROG_CC
AC_PROG_INSTALL

AC_CHECK_HEADER(getopt.h, AC_DEFINE(HAVE_GETOPT_H))

dnl SH=NONE

dnl If we are runnin bash right now, BASH is set.
unset BASH

if test "x$SH" = x ; then
	AC_PATH_PROG(BASH, bash, NONE)
	if test ! "x$BASH" = xNONE ; then
		if $BASH -posix -c true ; then
			SH="$BASH -posix"
		elif $BASH --posix -c true ; then
			SH="$BASH --posix"
		fi
		echo "Using $SH".
	fi
fi

if test "x$SH" = x ; then
	AC_PATH_PROG(KSH, ksh, NONE)
	if test ! "x$KSH" = xNONE ; then
		SH="$KSH"
		echo "Using $SH".
	fi
fi

if test "x$SH" = x ; then
	AC_PATH_PROG(BINSH, sh, NONE)
	if test "x$BINSH" = xNONE; then
		echo "ERROR: Can't find sh." >&2
		exit 1
	else
		SH="$BINSH"
	fi
fi

AC_SUBST(SH)

AC_PATH_PROG(AWK, awk, NONE)
AC_PATH_PROG(MAWK, mawk, NONE)
AC_PATH_PROG(GAWK, gawk, NONE)
AC_PATH_PROG(NAWK, nawk, NONE)

if test "x$AWK" != "xNONE" ; then
	AWK="$AWK"
fi

if test "x$NAWK" != "xNONE" ; then
	AWK="$NAWK"
fi

if test "x$GAWK" != "xNONE" ; then
	AWK="$GAWK"
fi

if test "x$MAWK" != "xNONE" ; then
	AWK="$MAWK"
fi
		
AC_SUBST(AWK)

AC_PATH_PROG(TAC, tac, NONE)
if test "x$TAC" = "xNONE"; then
	TACTARGET="tac"
	AC_SUBST(TACTARGET)
	TACAWK="tac.awk"
	TAC="$libdir/tac"
fi	
AC_SUBST(TAC)

AC_ARG_ENABLE(lbdb_dotlock,
	[  --enable-lbdb-dotlock   Force use of lbdb_dotlock program],
        [lbdb_cv_lbdb_dotlock="$enableval"])

AC_PATH_PROG(DOTLOCK_OLD, mutt.dotlock, no)
if test x$ac_cv_path_DOTLOCK_OLD = xno ; then
	AC_PATH_PROG(DOTLOCK, mutt_dotlock, no)
else
	ac_cv_path_DOTLOCK=$ac_cv_path_DOTLOCK_OLD
fi

if test x$ac_cv_path_DOTLOCK = xno || test x$lbdb_cv_lbdb_dotlock = xyes
then
	DOTLOCK_TARGET="lbdb_dotlock"
	AC_SUBST(DOTLOCK_TARGET)
	DOTLOCK="$bindir"/lbdb_dotlock
fi

AC_SUBST(DOTLOCK)

DOTLOCKBASE=`basename $DOTLOCK`
AC_SUBST(DOTLOCKBASE)

path_fetchaddr="$libdir/fetchaddr"
AC_SUBST(path_fetchaddr)

MODULES="m_inmail m_passwd m_muttalias m_pine m_gnomecard m_bbdb"

AC_PATH_PROG(FINGER, finger, "no")
if test "x$FINGER" != xno ; then
	MODULES="$MODULES m_finger"
	AC_SUBST(FINGER)
fi

AC_PATH_PROG(ABOOK, abook, "no")
if test "x$ABOOK" != xno ; then
	MODULES="$MODULES m_abook"
	AC_SUBST(ABOOK)
fi

AC_PATH_PROG(ADDR_EMAIL, addr-email, "no")
if test "x$ADDR_EMAIL" != xno ; then
	MODULES="$MODULES m_addr_email"
	AC_SUBST(ADDR_EMAIL)
fi

AC_PATH_PROG(YPCAT, ypcat, "no")
if test "x$YPCAT" != xno ; then
	MODULES="$MODULES m_yppasswd"
	AC_SUBST(YPCAT)
fi

AC_PATH_PROG(NISCAT, niscat, "no")
if test "x$NISCAT" != xno ; then
	MODULES="$MODULES m_nispasswd"
	AC_SUBST(NISCAT)
fi

AC_PATH_PROG(GPG, gpg, "no")
if test "x$GPG" != xno ; then
	MODULES="$MODULES m_gpg"
	AC_SUBST(GPG)
fi

AC_PATH_PROG(PGPK, pgpk, "no")
if test "x$PGPK" != xno ; then
	MODULES="$MODULES m_pgp5"
	AC_SUBST(PGPK)
fi

AC_PATH_PROG(PGP, pgp, "no")
if test "x$PGP" != xno ; then
	MODULES="$MODULES m_pgp2"
	AC_SUBST(PGP)
fi

AC_PATH_PROG(PERL, perl, "no")
if test "x$PERL" != xno ; then
	# m_fido needs nodelist2lbdb, which needs perl
	# m_palm needs palm_lsaddr, which needs perl
	# m_ldap needs mutt_ldap_query which is written in perl
	MODULES="$MODULES m_fido m_palm m_ldap"
	AC_SUBST(PERL)
fi

MODULES_SH=""
for i in $MODULES ; do
	MODULES_SH="$MODULES_SH $i.sh"
done

LBDB_VERSION=`sed -e '2,10000d;s/^.*(\(.*\)).*$/\1/' < debian/changelog`
AC_SUBST(LBDB_VERSION)

AC_SUBST(MODULES)
AC_OUTPUT(Makefile lbdbq.sh munge.awk munge-keeporder.awk lbdb-fetchaddr.sh \
	lbdb-munge.sh lbdb_lib.sh nodelist2lbdb.pl palm_lsaddr.pl \
	mutt_ldap_query.pl lbdb.spec $MODULES_SH $TACAWK lbdb.spec)
